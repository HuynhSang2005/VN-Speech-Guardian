/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * VN Speech Guardian API
 * Speech-to-Text with toxicity detection for Vietnamese
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod'

/**
 * Send Clerk JWT either in request body or Authorization header. User will be created/synced in database.
 * @summary Verify Clerk token and sync user to database
 */
export const authControllerVerifyClerkTokenBody = zod
  .object({
    token: zod.string().optional(),
  })
  .strict()

export const authControllerVerifyClerkToken200Response = zod
  .object({
    id: zod.string(),
    clerkId: zod.string(),
    email: zod.string(),
    role: zod.string(),
  })
  .strict()

/**
 * @summary Create a new session
 */
export const sessionsControllerCreateBodyLangDefault = 'vi'

export const sessionsControllerCreateBody = zod
  .object({
    userId: zod.string(),
    device: zod.string().optional(),
    lang: zod.string().default(sessionsControllerCreateBodyLangDefault),
  })
  .strict()

export const sessionsControllerCreate201Response = zod
  .object({
    success: zod.boolean(),
    data: zod
      .object({
        id: zod.string().describe('Session id'),
        userId: zod.string().describe('User id owning this session'),
        device: zod.string().optional(),
        lang: zod.string(),
        startedAt: zod.string(),
        endedAt: zod.object({}).nullable(),
      })
      .strict(),
  })
  .strict()

/**
 * @summary List sessions (paged)
 */
export const sessionsControllerListQueryParams = zod
  .object({
    page: zod.string().optional().describe('Page number'),
    perPage: zod.string().optional().describe('Items per page'),
  })
  .strict()

export const sessionsControllerList200Response = zod
  .object({
    success: zod.boolean(),
    data: zod
      .object({
        items: zod.array(
          zod
            .object({
              id: zod.string().describe('Session id'),
              userId: zod.string().describe('User id owning this session'),
              device: zod.string().optional(),
              lang: zod.string(),
              startedAt: zod.string(),
              endedAt: zod.object({}).nullable(),
            })
            .strict()
        ),
        total: zod.number(),
      })
      .strict(),
  })
  .strict()

/**
 * @summary Get session detail
 */
export const sessionsControllerGetParams = zod
  .object({
    id: zod.string().describe('Session id'),
  })
  .strict()

export const sessionsControllerGet200Response = zod
  .object({
    success: zod.boolean(),
    data: zod
      .object({
        id: zod.string().describe('Session id'),
        userId: zod.string().describe('User id owning this session'),
        device: zod.string().optional(),
        lang: zod.string(),
        startedAt: zod.string(),
        endedAt: zod.object({}).nullable(),
      })
      .strict(),
  })
  .strict()

/**
 * @summary Delete a session
 */
export const sessionsControllerRemoveParams = zod
  .object({
    id: zod.string().describe('Session id'),
  })
  .strict()

/**
 * @summary List transcripts for a session
 */
export const sessionsControllerTranscriptsParams = zod
  .object({
    id: zod.string().describe('Session id'),
  })
  .strict()

export const sessionsControllerTranscripts200Response = zod
  .object({
    success: zod.boolean(),
    data: zod
      .object({
        items: zod.array(
          zod
            .object({
              id: zod.string().describe('Transcript id'),
              sessionId: zod.string().describe('Session id this transcript belongs to'),
              segIdx: zod.number().describe('Segment index (order within session)'),
              text: zod.string().describe('Recognized text for the segment'),
              startMs: zod.number().describe('Start time in milliseconds'),
              endMs: zod.number().describe('End time in milliseconds'),
            })
            .strict()
        ),
        total: zod.number(),
      })
      .strict(),
  })
  .strict()

export const statsControllerOverview200Response = zod
  .object({
    success: zod.boolean(),
    data: zod
      .object({
        totalSessions: zod.number(),
        totalDetections: zod.number(),
        toxicPercent: zod.number(),
      })
      .strict(),
  })
  .strict()
