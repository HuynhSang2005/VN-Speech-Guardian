services:
  postgres:
    image: postgres:16-alpine
    container_name: vsg-postgres
    environment:
      POSTGRES_USER: vsg
      POSTGRES_PASSWORD: vsg
      POSTGRES_DB: vsg_dev
    ports:
      - "3273:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  ai-worker:
    build:
      # Use the ai-worker folder as build context so the Dockerfile's "COPY app ./app" works
      context: ../apps/ai-worker
      dockerfile: Dockerfile
    container_name: vsg-ai-worker
    environment:
      # Enable model loading and ORT path
      AI_LOAD_MODELS: "true"
      USE_ONNXRUNTIME: "true"
      GATEWAY_API_KEY: dev-secret
      # Point to ONNX dir (exported) and HF dir for fallback
      PHOBERT_ONNX_DIR: /app/app/models/bert-finetuned-onnx
      PHOBERT_CHECKPOINT_DIR: /app/app/models/phobert-hsd
      # Whisper defaults
      ASR_MODEL_NAME: small
      ASR_DEVICE: cpu
      ASR_COMPUTE_TYPE: int8
      ASR_LANGUAGE: vi
      ASR_BEAM_SIZE: "5"
      TEXT_MAX_LEN: "256"
    ports:
      - "8001:8001"
    volumes:
      # Bind model directories from repo into container for quick iteration
      - ../apps/ai-worker/app/models:/app/app/models:ro
    healthcheck:
      # Use python to probe /readyz (curl may not be present in minimal images).
      # Exit 0 on HTTP 200, else exit 1. Add start_period to allow warm-up.
      test: ["CMD", "python", "-c", "import sys,urllib.request; req=urllib.request.Request('http://127.0.0.1:8001/readyz'); r=urllib.request.urlopen(req); sys.exit(0 if r.getcode()==200 else 1)"]
      interval: 10s
      timeout: 5s
    retries: 5
    start_period: 60s

volumes:
  postgres_data: